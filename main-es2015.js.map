{"version":3,"sources":["webpack:///src/app/services/service2.service.ts","webpack:///src/app/components/home/com1/com1.component.html","webpack:///src/app/components/home/com1/com1.component.ts","webpack:///src/app/directives/validate.directive.ts","webpack:///src/app/components/home/com2/com2.component.html","webpack:///src/app/components/home/com2/com2.component.ts","webpack:///src/app/components/home/home.component.html","webpack:///src/app/components/home/home.component.ts","webpack:///src/app/services/member.service.ts","webpack:///src/app/components/auth/register/register.component.html","webpack:///src/app/components/auth/register/register.component.ts","webpack:///src/app/components/auth/login/login.component.html","webpack:///src/app/components/auth/login/login.component.ts","webpack:///src/app/components/profile/profile.component.html","webpack:///src/app/components/profile/profile.component.ts","webpack:///src/app/components/data/data.component.ts","webpack:///src/app/components/data/data.component.html","webpack:///src/app/guards/authen.guard.ts","webpack:///src/app/guards/unauthen.guard.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/components/navbar/navbar.component.ts","webpack:///src/app/components/navbar/navbar.component.html","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["name","formData","form","this","firstname","lastname","sex","phones","Observable","observ","setTimeout","next","onSaveFormData","Promise","resolve","reject","service2","getPromiseFormData","error","alert","message","ValidateDirective","errorMessage","required","pattern","calss","control","text","getErrorMessage","valueChanges","subscribe","invalid","errorKey","Object","keys","errors","replace","requiredPattern","builder","onClose","submitLoading","createFormData","getPhonesForm","push","createPhoneControl","phoneArray","length","removeAt","get","markAsTouched","controls","forEach","onPromiseSaveFormData","value","then","console","log","catch","finally","group","array","onSubmit","onAddPhone","onRemovePhone","HomeComponent","isShowWorkshop","memberItems","find","m","username","model","id","Math","random","fullname","password","memberLogin","member","service","router","loading","onRegister","data","navigate","confirm","onLogin","ProfileComponent","initalLoadData","getMemberLogon","onLogout","DataComponent","getmembers","state","UnauthenGuard","routes","path","component","canActivate","AppRoutingModule","forRoot","NavbarComponent","AppComponent","title","AppModule","bootstrapModule","err","webpackEmptyAsyncContext","req","e","Error","code","module","exports"],"mappings":"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","file":"x","sourcesContent":["import { Injectable } from '@angular/core';\nimport { IForm } from '../interfaces/form.interface';\nimport { Observable } from \"rxjs\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class Service2Service {\n\n  constructor() { }\n\n  name: string = \"Data by service 2.\";\n\n  private formData: IForm = new formData();\n\n  // บันทึกข้อมูลใส่ตัวแปร formData\n  private onSaveFormData(form: IForm) {\n    this.formData.firstname = form.firstname;\n    this.formData.lastname = form.lastname;\n    this.formData.sex = form.sex;\n    this.formData.phones = form.phones;\n  }\n\n  getObservFormData() {\n    return new Observable<IForm>(observ => {\n      setTimeout(() => {\n        observ.next(this.formData);\n        // observ.error({ message: 'server error' });\n      }, 500);\n    });\n  }\n\n  onObservSaveFormData(form: IForm) {\n    return new Observable(observ => {\n      setTimeout(() => {\n        this.onSaveFormData(form);\n        observ.next();\n      }, 3000);\n    })\n  }\n\n  getPromiseFormData() {\n    return new Promise<IForm>((resolve, reject) => {\n      resolve(this.formData)\n      // reject({ message: 'server error' });\n    });\n  }\n\n  onPromiseSaveFormData(form: IForm) {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        this.onSaveFormData(form);\n        resolve();\n      }, 2000);\n    });\n  }\n\n}\n\nclass formData implements IForm {\n  sex: string = 'ไม่มีข้อมูล !';\n  firstname: string = 'ไม่มีข้อมูล !';\n  lastname: string = 'ไม่มีข้อมูล !';\n  phones: string[];\n}","<div class=\"card bg-light\" *ngIf=\"formData\">\n    <h3 class=\"card-header\">COM 1</h3>\n    <div class=\"card-body\">\n        <table>\n            <tbody>\n                <tr>\n                    <th>เพศ</th>\n                    <td>:</td>\n                    <td>{{ formData.sex }}</td>\n                </tr>\n\n                <tr>\n                    <th>ชื่อ</th>\n                    <td>:</td>\n                    <td>{{ formData.firstname }}</td>\n                </tr>\n\n                <tr>\n                    <th>นามสกุล</th>\n                    <td>:</td>\n                    <td>{{ formData.lastname }}</td>\n                </tr>\n\n                <tr>\n                    <th>เบอร์โทร</th>\n                    <td>:</td>\n                    <td>\n                        <div *ngFor=\"let phone of formData.phones\">{{ phone }}</div>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Service2Service } from 'src/app/services/service2.service';\nimport { IForm } from 'src/app/interfaces/form.interface';\n\n@Component({\n  selector: 'app-com1',\n  templateUrl: './com1.component.html',\n  styleUrls: ['./com1.component.scss']\n})\nexport class Com1Component implements OnInit {\n  formData: IForm;\n\n  constructor(private service2: Service2Service) { }\n\n  async ngOnInit() {\n    try {\n      this.formData = await this.service2.getPromiseFormData();\n    } catch (error) {\n      alert(error.message)\n    }\n\n\n    // this.service2\n    //   .getPromiseFormData()\n    //   .then(data => {\n    //     console.log(data);\n    //   })\n    //   .catch(error => {\n    //     alert(error.message);\n    //   });\n  }\n\n}\n","import { AbstractControl } from '@angular/forms';\nimport { Directive, HostBinding, Input, OnChanges } from '@angular/core';\n\n@Directive({\n    selector: '[appValidate]'\n})\nexport class ValidateDirective implements OnChanges {\n    constructor() { }\n\n    errorMessage = {\n        required: 'The field is required.',\n        pattern: 'The field is not match \"{0}\"'\n    };\n\n    @Input('appValidate') control: AbstractControl;\n    @HostBinding('class') calss: string = 'invalid-feedback';\n    @HostBinding('innerText') text: string;\n\n    ngOnChanges() {\n        if (!this.control) return;\n        // Get Error message default\n        this.text = this.getErrorMessage();\n        // Get Realtime Error message \n        this.control.valueChanges\n            .subscribe(() => {\n                this.text = this.getErrorMessage();\n            });\n    }\n\n    // แสดงข้อมูล Error message จาก FormControl\n    private getErrorMessage() {\n        const control = this.control;\n        if (control && control.invalid) {\n            const errorKey = Object.keys(control.errors)[0];\n            let errorMessage = this.errorMessage[errorKey];\n            switch (errorKey) {\n                case 'pattern':\n                    errorMessage = this.errorMessage[errorKey].replace('{0}', control.errors.pattern.requiredPattern);\n                    break;\n                case 'message':\n                    errorMessage = control.errors[errorKey];\n                    break;\n            }\n            return errorMessage;\n        }\n    }\n}\n","<div class=\"card bg-light mb-3\">\n    <h3 class=\"card-header\">COM 2</h3>\n\n    <form (submit)=\"onSubmit()\" [formGroup]=\"form\">\n        <div class=\"card-body\">\n            <div class=\"row\">\n                <!-- เลือกเพศ -->\n                <div class=\"col-12\">\n                    <div class=\"form-group\">\n                        <label class=\"lb-sex\">เพศ :</label>\n                        <div class=\"form-check form-check-inline\">\n                            <input type=\"radio\" class=\"form-check-input\" value=\"ผู้ชาย\" id=\"man\" formControlName=\"sex\">\n                            <label for=\"man\" class=\"form-check-label\">ผู้ชาย</label>\n                        </div>\n                        <div class=\"form-check form-check-inline\">\n                            <input type=\"radio\" class=\"form-check-input\" value=\"ผู้หญิง\" id=\"women\"\n                                formControlName=\"sex\">\n                            <label for=\"women\" class=\"form-check-label\">ผู้หญิง</label>\n                        </div>\n                    </div>\n                </div>\n\n                <!-- ชื่อ -->\n                <div class=\"col-6\">\n                    <div class=\"form-group\">\n                        <label for=\"\">ชื่อ :</label>\n                        <input type=\"text\" class=\"form-control\" formControlName=\"firstname\">\n                        <div [appValidate]=\"form.get('firstname')\"></div>\n                    </div>\n                </div>\n\n                <!-- นามสกุล -->\n                <div class=\"col-6\">\n                    <div class=\"form-group\">\n                        <label for=\"\">นามสกุล :</label>\n                        <input type=\"text\" class=\"form-control\" formControlName=\"lastname\">\n                        <div [appValidate]=\"form.get('lastname')\"></div>\n                    </div>\n                </div>\n\n                <!-- เบอร์โทร -->\n                <div class=\"col-12\">\n                    <label for=\"\">เบอร์โทร :</label>\n                    <div class=\"form-group\" *ngFor=\"let control of getPhonesForm.controls\">\n                        <input type=\"text\" class=\"form-control\" [formControl]=\"control\" maxlength=\"10\">\n                        <div [appValidate]=\"control\"></div>\n                    </div>\n\n                    <div class=\"add-remove-link float-right\">\n                        <a (click)=\"onAddPhone()\" class=\"text-primary\"><u><small>เพิ่มเบอร์โทร</small></u></a>\n                        <span class=\"text-muted\"> | </span>\n                        <a (click)=\"onRemovePhone()\" class=\"text-danger\"><u><small>ลบเบอร์โทร</small></u></a>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"card-footer\">\n            <div class=\"row\">\n                <div class=\"col\">\n                    <button type=\"submit\" *ngIf=\"!submitLoading; else submitBtnLoading\" class=\"btn btn-block btn-warning\">บันทึกข้อมูล</button>\n                </div>\n                <div class=\"col\">\n                    <button (click)=\"onClose.emit(false)\" type=\"button\" class=\"btn btn-block btn-danger\">ยกเลิก</button>\n                </div>\n            </div>\n        </div>\n    </form>\n</div>\n\n<ng-template #submitBtnLoading>\n    <button type=\"submit\" disabled class=\"btn btn-block btn-warning\">กำลังโหลด</button>\n</ng-template>","import { Component, OnInit, EventEmitter, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, FormArray, Validators } from '@angular/forms';\nimport { Service2Service } from 'src/app/services/service2.service';\n\n@Component({\n  selector: 'app-com2',\n  templateUrl: './com2.component.html',\n  styleUrls: ['./com2.component.scss']\n})\nexport class Com2Component implements OnInit {\n\n  constructor(\n    private builder: FormBuilder,\n    private service2: Service2Service\n  ) {\n    this.createFormData();\n  }\n\n  ngOnInit(): void {\n  }\n\n  @Output('onClose') onClose = new EventEmitter<boolean>();\n\n  /** สำหรับเก็บค่าฟอร์ม */\n  form: FormGroup;\n\n  /** เพิ่มเบอร์โทรใหม่ */\n  onAddPhone() {\n    const phoneArray = this.getPhonesForm;\n    phoneArray.push(this.createPhoneControl());\n  }\n\n  submitLoading: boolean = false;\n\n  /** ลบเบอร์โทร */\n  onRemovePhone() {\n    const phoneArray = this.getPhonesForm;\n    if (phoneArray.length <= 1) return;\n    phoneArray.removeAt(phoneArray.length - 1);\n  }\n\n  /** บันทึกข้อมูล */\n  onSubmit() {\n    this.form.get('sex').markAsTouched();\n    this.form.get('firstname').markAsTouched();\n    this.form.get('lastname').markAsTouched();\n    this.getPhonesForm.controls.forEach(control => control.markAsTouched());\n\n    if (this.form.invalid) return;\n\n    this.submitLoading = true;\n    this.service2\n      .onPromiseSaveFormData(this.form.value)\n      .then(() => {\n        console.log('save success');\n      })\n      .catch(error => {\n        alert(error.message);\n      })\n      .finally(() => {\n        this.submitLoading = false;\n      });\n\n    // this.service2\n    //   .onObservSaveFormData(this.form.value)\n    //   .subscribe(\n    //     () => {\n    //       console.log('Save Success');\n    //       this.submitLoading = false;\n    //     },\n    //     (error) => {\n    //       this.submitLoading = false;\n    //     }\n    //   );\n  }\n\n  /** ดึงข้อมูลเบอร์โทรที่อยู่ใน FormArray */\n  get getPhonesForm() {\n    const formArray = this.form.get('phones') as FormArray;\n    return formArray;\n  }\n\n  /** สร้างฟอร์ม */\n  private createFormData() {\n    this.form = this.builder.group({\n      sex: [null, Validators.required],\n      firstname: [null, Validators.required],\n      lastname: [null, Validators.required],\n      phones: this.builder.array([this.createPhoneControl()])\n    });\n  }\n\n  /** สร้าง Phone Control Form */\n  private createPhoneControl() {\n    return this.builder.control(null, [\n      Validators.required,\n      Validators.pattern(/^[0-9]{10}$/)\n    ]);\n  }\n\n}\n","<div class=\"card\">\n    <h3 class=\"card-header\">Home Page</h3>\n    <div class=\"card-body\">\n        <h1>Basic Service</h1>\n        <p>เรียนรู้เรื่องของ Service</p>\n        <hr>\n\n        <div class=\"form-group\" *ngIf=\"isShowWorkshop == false\">\n            <button type=\"button\" class=\"btn btn-primary\" (click)=\"isShowWorkshop = true\">\n                Show Workshop\n            </button>\n        </div>\n\n        <div class=\"row\" *ngIf=\"isShowWorkshop == true\">\n            <div class=\"col-sm\">\n                <app-com1></app-com1>\n            </div>\n            <div class=\"col-sm\">\n                <app-com2 (onClose)=\"isShowWorkshop = $event\"></app-com2>\n            </div>\n        </div>\n    </div>\n</div>","import { Component, OnInit, EventEmitter, Output } from '@angular/core';\nimport { Service2Service } from 'src/app/services/service2.service';\nimport { Service1Service } from 'src/app/services/service1.service';\nimport { FormBuilder, FormGroup, FormArray, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n  isShowWorkshop: boolean = true;\n\n  ngOnInit(): void {\n  }\n  \n}\n","import { Injectable } from '@angular/core';\nimport { RegisterModel, IMember, LoginModel } from '../interfaces/member.inteface';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MemberService {\n\n  constructor() { }\n\n  private memberItems: IMember[] = [];\n  private memberLogin: IMember;\n\n  getmembers() {\n    return new Observable<IMember[]>(observ => {\n      observ.next(this.memberItems);\n    });\n  }\n\n  onRegister(value: RegisterModel) {\n    return new Observable(observ => {\n      setTimeout(() => {\n        if (this.memberItems.find(m => m.username == value.username)) {\n          return observ.error({ message: 'มีผู้ใช้งานในระบบแล้ว' });\n        }\n        const model: IMember = {\n          id: Math.random(),\n          fullname: value.fullname,\n          username: value.username,\n          password: value.password,\n        };\n\n        this.memberItems.push(model);\n\n        observ.next(model);\n      }, 500);\n    });\n  }\n\n  onLogin(value: LoginModel) {\n    return new Observable(observ => {\n      setTimeout(() => {\n\n        const memberLogin = this.memberItems.find(member => {\n          return member.username == value.username && member.password == value.password\n        });\n\n        if (!memberLogin) return observ.error({ message: 'ชื่อผู้ใช้งานหรือรหัสผ่านไม่ถูกต้อง' });\n        this.memberLogin = memberLogin\n        observ.next(this.memberLogin);\n\n      }, 500);\n    });\n  }\n\n  getMemberLogon(): Observable<IMember> {\n    return new Observable<IMember>(observ => {\n      setTimeout(() => {\n        observ.next(this.memberLogin);\n      }, 500);\n    });\n  }\n\n  onLogout() {\n    return new Observable(observ => {\n      setTimeout(() => {\n        this.memberLogin = null;\n        observ.next(this.memberLogin);\n      }, 500);\n    });\n  }\n}\n","<div class=\"card\">\n    <div class=\"card-header\">\n        Register\n    </div>\n    <div class=\"card-body\">\n        <form [formGroup]=\"form\" (submit)=\"onSubmit()\">\n            <h4>register</h4>\n            <div class=\"form-group\">\n                <label for=\"\">ชื่อ-นามสกุล</label>\n                <input type=\"text\" class=\"form-control\" formControlName=\"fullname\">\n                <div [appValidate]=\"form.get('fullname')\"></div>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"\">ชื่อผู้ใช้</label>\n                <input type=\"text\" class=\"form-control\" formControlName=\"username\">\n                <div [appValidate]=\"form.get('username')\"></div>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"\">รหัสผ่าน</label>\n                <input type=\"password\" class=\"form-control\" formControlName=\"password\">\n                <div [appValidate]=\"form.get('password')\"></div>\n            </div>\n            <div class=\"form-group\">\n                <div class=\"form-check\">\n                    <input type=\"checkbox\" name=\"\" id=\"confirm\" class=\"form-check-input\" formControlName=\"confirm\">\n                    <label for=\"confirm\" class=\"form-check-label\">ยืนยันสมาชิก</label>\n                </div>\n            </div>\n            <div class=\"form-group\">\n                <button type=\"submit\" *ngIf=\"!loading; else btnLoading\" class=\"btn btn-primary btn-block\"\n                    [disabled]=\"!form.value['confirm']\">สมัครสมาชิก</button>\n            </div>\n            <div class=\"form-group text-center\">\n                <a routerLink=\"/login\"><u>เข้าสู่ระบบ</u></a>\n            </div>\n        </form>\n    </div>\n</div>\n\n<ng-template #btnLoading>\n    <button type=\"submit\" class=\"btn btn-primary btn-block\" disabled>กำลังโหลด</button>\n</ng-template>","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MemberService } from 'src/app/services/member.service';\nimport { IMember } from 'src/app/interfaces/member.inteface';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit {\n  form: FormGroup;\n  loading: boolean;\n\n  constructor(\n    private builder: FormBuilder,\n    private service: MemberService,\n    private router: Router\n  ) {\n    this.createFormData();\n  }\n\n  ngOnInit(): void {\n  }\n  /**\n   * บันทึกข้อมูบ\n   */\n  onSubmit() {\n    this.form.get('fullname').markAsTouched();\n    this.form.get('username').markAsTouched();\n    this.form.get('password').markAsTouched();\n    if (this.form.invalid) return;\n    this.loading = true;\n    // console.log(this.form.value);\n    this.service\n      .onRegister(this.form.value)\n      .subscribe(\n        data => {\n          this.router.navigate(['/', 'login']);\n        },\n        error => {\n          alert(error.message);\n          this.loading = false;\n        }\n      );\n\n  }\n\n  /**\n   * สร้าง Form Data\n   */\n  private createFormData() {\n    this.form = this.builder.group({\n      fullname: ['test test', Validators.required],\n      username: ['test', [Validators.required, Validators.pattern(/^[A-z0-9]{3,10}$/)]],\n      password: ['1234', [Validators.required, Validators.pattern(/^[A-z0-9]{3,10}$/)]],\n      confirm: [true]\n    });\n  }\n\n}\n","<div class=\"card\">\n    <div class=\"card-header\">\n        Login\n    </div>\n    <div class=\"card-body\">\n        <form [formGroup]=\"form\" (submit)=\"onSubmit()\">\n            <h4>Login</h4>\n            <div class=\"form-group\">\n                <label for=\"\">ชื่อผู้ใช้</label>\n                <input type=\"text\" class=\"form-control\" formControlName=\"username\">\n                <div [appValidate]=\"form.get('username')\"></div>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"\">รหัสผ่าน</label>\n                <input type=\"password\" class=\"form-control\" formControlName=\"password\">\n                <div [appValidate]=\"form.get('password')\"></div>\n            </div>\n            <div class=\"form-group\">\n                <button type=\"submit\" *ngIf=\"!loading; else btnLoading\" class=\"btn btn-primary btn-block\">เข้าสู่ระบบ</button>\n            </div>\n            <div class=\"form-group text-center\">\n                <a routerLink=\"/register\"><u>สมัครสมาชิก</u></a>\n            </div>\n        </form>\n    </div>\n</div>\n\n<ng-template #btnLoading>\n    <button type=\"submit\" class=\"btn btn-primary btn-block\" disabled>กำลังโหลด</button>\n</ng-template>","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MemberService } from 'src/app/services/member.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  form: FormGroup;\n  loading: boolean;\n\n  constructor(\n    private builder: FormBuilder,\n    private service: MemberService) {\n    this.createFormData();\n  }\n\n  ngOnInit(): void {\n  }\n\n  onSubmit() {\n    this.form.get('username').markAsTouched();\n    this.form.get('password').markAsTouched();\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.loading = true;\n    this.service\n      .onLogin(this.form.value)\n      .subscribe(\n        data => {\n          console.log(\"success\");\n          this.loading = false;\n        },\n        error => {\n          alert(error.message);\n          this.loading = false;\n        }\n      );\n  }\n\n  private createFormData() {\n    this.form = this.builder.group({\n      username: ['test', [Validators.required, Validators.pattern(/^[A-z0-9]{3,10}$/)]],\n      password: ['1234', [Validators.required, Validators.pattern(/^[A-z0-9]{3,10}$/)]],\n    });\n  }\n\n}\n","<div class=\"card\">\n    <div class=\"card-header\">\n        Profile\n    </div>\n    <div class=\"card-body\">\n        <table class=\"table\" *ngIf=\"member\">\n            <tr>\n                <th>ID</th>\n                <th>:</th>\n                <th>{{ member.id }}</th>\n            </tr>\n            <tr>\n                <th>Fullname</th>\n                <th>:</th>\n                <th>{{ member.fullname }}</th>\n            </tr>\n            <tr>\n                <th>Username</th>\n                <th>:</th>\n                <th>{{ member.username }}</th>\n            </tr>\n            <tr>\n                <th>Password</th>\n                <th>:</th>\n                <th>{{ member.password }}</th>\n            </tr>\n            <tr>\n                <th>Logout</th>\n                <th>:</th>\n                <th>\n                    <button class=\"btn btn-danger btn-sm\" *ngIf=\"!loading; else btnLoading\"\n                        (click)=\"onLogout()\">Logout</button>\n                </th>\n            </tr>\n        </table>\n    </div>\n</div>\n\n<ng-template #btnLoading>\n    <button class=\"btn btn-danger btn-sm\" disabled>กำลังโหลด...</button>\n</ng-template>","import { Component, OnInit } from '@angular/core';\nimport { IDeactive } from 'src/app/guards/deavtive.guard';\nimport { MemberService } from 'src/app/services/member.service';\nimport { IMember } from 'src/app/interfaces/member.inteface';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.scss']\n})\nexport class ProfileComponent implements OnInit, IDeactive {\n  member: IMember;\n  loading: boolean;\n\n  constructor(\n    private service: MemberService,\n    private router: Router\n  ) {\n    this.initalLoadData();\n  }\n\n  onExit(): boolean {\n    return true;\n  };\n\n  ngOnInit(): void {\n  }\n\n  private initalLoadData() {\n    this.service\n      .getMemberLogon()\n      .subscribe(memberLogin => {\n        this.member = memberLogin;\n      });\n  }\n\n  onLogout() {\n    this.loading = true;\n    this.service\n      .onLogout()\n      .subscribe(\n        () => {\n          this.loading = false;\n          this.router.navigate(['/', 'login']);\n        }\n      );\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Service1Service } from 'src/app/services/service1.service';\nimport { Service2Service } from 'src/app/services/service2.service';\nimport { MemberService } from 'src/app/services/member.service';\nimport { IMember } from 'src/app/interfaces/member.inteface';\n\n@Component({\n  selector: 'app-data',\n  templateUrl: './data.component.html',\n  styleUrls: ['./data.component.scss']\n})\nexport class DataComponent implements OnInit {\n  memberItems: IMember[];\n\n  constructor(\n    private service: MemberService\n  ) {\n    this.service\n      .getmembers()\n      .subscribe(\n        data => {\n          this.memberItems = data\n        }\n      );\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"card\">\n    <div class=\"card-header\">\n        Data\n    </div>\n    <div class=\"card-body\">\n        {{ memberItems | json }}\n    </div>\n</div>","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { MemberService } from '../services/member.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthenGuard implements CanActivate {\n\n  constructor(private service: MemberService) { }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    return new Observable(observ => {\n      this.service\n        .getMemberLogon()\n        .subscribe(memberLogin => {\n          if (memberLogin) {\n            return observ.next(true);\n          } else {\n            return observ.next(false);\n          }\n        });\n    });\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { MemberService } from '../services/member.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UnauthenGuard implements CanActivate {\n\n  constructor(private service: MemberService) { }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    return new Promise((resolve => {\n      this.service\n        .getMemberLogon()\n        .subscribe(memberLogin => {\n          if (!memberLogin) {\n            return resolve(true);\n          } else {\n            return resolve(false);\n          }\n        })\n    }));\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { HomeComponent } from './components/home/home.component';\nimport { RegisterComponent } from './components/auth/register/register.component';\nimport { LoginComponent } from './components/auth/login/login.component';\nimport { ProfileComponent } from './components/profile/profile.component';\nimport { DataComponent } from './components/data/data.component';\nimport { AuthenGuard } from './guards/authen.guard';\nimport { UnauthenGuard } from './guards/unauthen.guard';\n\n\nconst routes: Routes = [\n  { path: '', component: HomeComponent },\n  { path: 'register', component: RegisterComponent, canActivate: [UnauthenGuard] },\n  { path: 'login', component: LoginComponent, canActivate: [UnauthenGuard] },\n  { path: 'profile', component: ProfileComponent, canActivate: [AuthenGuard] },\n  { path: 'data', component: DataComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.scss']\n})\nexport class NavbarComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n    <div class=\"container\">\n        <a class=\"navbar-brand\" routerLink=\"/\">Angular</a>\n        <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\"\n            aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span class=\"navbar-toggler-icon\"></span>\n        </button>\n\n        <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n            <ul class=\"navbar-nav mr-auto\">\n                <li class=\"nav-item\" routerLinkActive=\"active\">\n                    <a class=\"nav-link\" routerLink=\"data\">Data</a>\n                </li>\n                <li class=\"nav-item\" routerLinkActive=\"active\">\n                    <a class=\"nav-link\" routerLink=\"register\">สมัครสมาชิก</a>\n                </li>\n                <li class=\"nav-item\" routerLinkActive=\"active\">\n                    <a class=\"nav-link\" routerLink=\"login\">เข้าสู่ระบบ</a>\n                </li>\n                <li class=\"nav-item\" routerLinkActive=\"active\">\n                    <a class=\"nav-link\" routerLink=\"profile\">โปรไฟล์</a>\n                </li>\n            </ul>\n            <form class=\"form-inline my-2 my-lg-0\">\n                <input class=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\">\n                <button class=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\n            </form>\n        </div>\n    </div>\n</nav>","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'angularbasic';\n}\n","<app-navbar></app-navbar>\n<div class=\"container mt-5\">\n  <router-outlet></router-outlet>\n</div>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { NavbarComponent } from './components/navbar/navbar.component';\nimport { HomeComponent } from './components/home/home.component';\nimport { RegisterComponent } from './components/auth/register/register.component';\nimport { ProfileComponent } from './components/profile/profile.component';\nimport { DataComponent } from './components/data/data.component';\nimport { Com1Component } from './components/home/com1/com1.component';\nimport { Com2Component } from './components/home/com2/com2.component';\nimport { ValidateDirective } from './directives/validate.directive';\nimport { Directive1Directive } from './directives/directive1.directive';\nimport { Directive2Directive } from './directives/directive2.directive';\nimport { LoginComponent } from './components/auth/login/login.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    NavbarComponent,\n    HomeComponent,\n    RegisterComponent,\n    LoginComponent,\n    ProfileComponent,\n    DataComponent,\n    Com1Component,\n    Com2Component,\n    Directive1Directive,\n    Directive2Directive,\n    ValidateDirective\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    ReactiveFormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}